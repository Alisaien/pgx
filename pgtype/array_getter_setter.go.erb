package pgtype

import (
	"fmt"
	"reflect"
)

<%
  types = [
    ["int16Array", "int16"],
    ["uint16Array", "uint16"],
  ]
%>

<% types.each do |array_type, element_type| %>
  type <%= array_type %> []<%= element_type %>

  func (a <%= array_type %>) Dimensions() []ArrayDimension {
    if a == nil {
      return nil
    }

    return []ArrayDimension{{Length: int32(len(a)), LowerBound: 1}}
  }

  func (a <%= array_type %>) Index(i int) any {
    return a[i]
  }

  func (a <%= array_type %>) IndexType() any {
    var el <%= element_type %>
    return el
  }

  func (a *<%= array_type %>) SetDimensions(dimensions []ArrayDimension) error {
    if dimensions == nil {
      a = nil
      return nil
    }

    elementCount := cardinality(dimensions)
    *a = make(<%= array_type %>, elementCount)
    return nil
  }

  func (a <%= array_type %>) ScanIndex(i int) any {
    return &a[i]
  }

  func (a <%= array_type %>) ScanIndexType() any {
    return new(<%= element_type %>)
  }
<% end %>
